knitr::opts_chunk$set(echo = TRUE)
# 팩터값 생성
# factor(x, levels, ordered)  # ordered: TRUE=순서형, FALSE=명목형, 기본값=FALSE
sex <- factor("m", c("m", "f"), FALSE)
sex
# 팩터값 생성
# factor(x, levels, ordered)  # ordered: TRUE=순서형, FALSE=명목형, 기본값=FALSE
sex <- factor("m", c("m", "f"))
sex
# 4.펙터인지 판단: is.factor(x)
is.factor(sex)
# [순서형데이터]
# 5.순서형 팩터 생성: ordered(x)
ordered("a", c("a", "b", "c"))
length(x1)
x1 <- c("a", "b", "c")
length(x1)
nrow(x1)
NROW(x1)
# 2.합집합 구하기
union(xx, yy)
xx <- c(1, 2, 3)
yy <- c(1, 3, 4)
# 1.동일한지 판단
identical(xx, yy)
# 2.합집합 구하기
union(xx, yy)
# 6.포함여부확인
"d" %in% xx
# 7.연산자
x <- c(1, 2, 3, 4, 5)
10 - x
setequal(c("a", "b", "c"), c("a", "b", "c", "c"))
identical(c("a", "b", "c"), c("a", "b", "c", "c"))
# 주어진 객체의 길이만큼 시퀀스 생성
# seq_along(along.with = )
x <- c(2, 4, 6, 8, 10)
1:NROW(x)
seq_along(x)
# 반복된 값 저장
rep(1:2, times = 5)
rep(1:2, each = 5)
req(1:2, each = 5, times = 5)
req(1:2, each = 5, times = 2)
# 반복된 값 저장
rep(1:2, times = 5)  # [1] 1 2 1 2 1 2 1 2 1 2
rep(1:2, each = 5)   # [1] 1 1 1 1 1 2 2 2 2 2
rep(1:2, each = 5, times = 2)
x <- list(name = "foo", height = c(1, 3, 5))
x
# 중첩 가능
list(a = list(val = c(1, 2, 3)), b = list(val = c(1, 2, 3, 4)))
matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3)
knitr::opts_chunk$set(echo = TRUE)
matrix(1:9, nrow=3, dimnames = list(c("r1", "r2", "r3"), c("c1", "c2", "c3")))
colnames(x) <- c("col1", "col2", "col3")
colnames(x) <- c("col1", "col2", "col3")
colnames <- (x, c("col1", "col2", "col3"))
colnames(x) <- (x, c("col1", "col2", "col3"))
colnames(x) <- c("col1", "col2", "col3")
rownames(x) <- c("col1", "col2", "col3")
x <- matrix(1:9, nrow=3, ncol=3,dimnames = list(c("r1", "r2", "r3"), c("c1", "c2", "c3")))
rownames(x) <- c("col1", "col2", "col3")
x
x <- matrix(1:9, nrow=3, ncol=3,dimnames = list(c("r1", "r2", "r3"), c("c1", "c2", "c3")))
colnames(x) <- c("col1", "col2", "col3")
x
# 전치행렬
t(x)
mat <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3)
# 전치행렬
t(mat)
mat
# 전치행렬
t(mat)
dim(matt)
# 차원 확인 및 변경
matt <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 3)
dim(matt)
dim(matt) <- c(3, 2)
matt
# 차원 확인 및 변경
matt <- matrix(c(1, 2, 3, 4, 5, 6), ncol = 3)
matt
# 3 x 4배열
array(1:12, dim = c(3, 4))
# 2 x 2 x 3배열
array(1:12, dim = c(2, 2, 3))
# 엑셀의 스프레드시트라고 생각
d <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(2, 4, 6, 8, 10),
z = c("m", "f", "m", "f", "m"))
d
View(d)
View(d)
str(d)
# 엑셀의 스프레드시트라고 생각
d <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(2, 4, 6, 8, 10),
z = c("M", "F", "M", "F", "M"))
str(d)
# 엑셀의 스프레드시트라고 생각
d <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(2, 4, 6, 8, 10),
z = c("M", "F", "M", "F", "M"),
stringsAsFactors = default.stringsAsFactors())
str(d)
# 엑셀의 스프레드시트라고 생각
d <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(2, 4, 6, 8, 10),
z = c("M", "F", "M", "F", "M"))
str(d)
data_frame1[, c("x"), drop=FALSE]
data_frame1 <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(2, 4, 6, 8, 10))
data_frame1[, c("x"), drop=FALSE]
data_frame1 <- data.frame(x = c(1, 2, 3, 4, 5),
y = c(2, 4, 6, 8, 10))
result1 <- data_frame1[, c("x"), drop=FALSE]
result2 <- data_frame1[, c("x")]
result1
View(result1)
View(result1)
result2
result1 <- data_frame1[, c("x"), drop=TRUE]
result1
data_frame2 <- data.frame(a=1:3, b=4:6, c=7:9)
d[, names(d) %in% c("b", "c")]
